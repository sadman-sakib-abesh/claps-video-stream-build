{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","media","useState","data","setData","down","setDown","video","useRef","arr","id","type","onChange","e","target","value","placeholder","ref","src","onClick","navigator","mediaDevices","getDisplayMedia","audio","then","stream","MediaRecorder","start","ondataavailable","push","current","srcObject","play","catch","err","alert","stop","blob","Blob","url","window","webkitURL","createObjectURL","href","download","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAyEeA,EAtEJ,WAET,IAOEC,EAPF,EAAoBC,mBAAS,IAA7B,mBAAMC,EAAN,KAAWC,EAAX,KACA,EAAqBF,mBAAS,IAA9B,mBAAOG,EAAP,KAAYC,EAAZ,KAEMC,EAAMC,iBAAO,IACfC,EAAI,GAyCN,OACE,gCACE,uBAAK,uBAAK,uBAClB,mCAAQ,qDACR,uBAAK,uBAAK,uBACV,2EAGM,mCAAQ,uBAAK,uBACb,uBAAOC,GAAG,KAAKC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKT,EAAQS,EAAEC,OAAOC,QAAQC,YAAY,cAAa,uBAAK,uBAAK,uBAAK,uBAEzG,uBAAOC,IAAKV,EAAOG,GAAG,UAHxB,OAG8C,wBAAQA,GAAG,QAAQQ,IAAKb,IAC5E,uBAAK,uBAAK,uBAAK,uBAAK,uBACb,wBAAQK,GAAG,MAAMS,QAAS,WAhD/BC,UAAUC,aAAaC,gBAAgB,CAACf,OAAM,EAAKgB,OAAM,IAAOC,MAAK,SAACC,IACxExB,EAAM,IAAKyB,cAAcD,IAInBE,MAAM,KAEZ1B,EAAM2B,gBAAgB,SAACf,GACrBJ,EAAIoB,KAAKhB,EAAEV,OAGTI,EAAMuB,QAAQC,UAAUN,EACxBlB,EAAMuB,QAAQE,UAETC,OAAM,SAACC,GACZC,MAAMD,OAiCH,6BALD,WAME,wBAAQxB,GAAG,MAAMS,QAAS,YA5BvB,WACXlB,EAAMmC,OACN,IAAMC,EAAK,IAAIC,KAAK7B,EAAI,CACxBE,KAAK,eAGC4B,EAAIC,OAAOC,UAAUC,gBAAgBL,GAC3C/B,EAAQiC,GAqB+BH,IAA/B,4BAA+D,uBAAK,uBACpE,mBAAG1B,GAAG,MAAMiC,KAAMtC,EAAMuC,SAAQ,UAAKzC,EAAL,SAAhC,yBAGR,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,uBAAK,2BCxDxC0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.3fe0896a.chunk.js","sourcesContent":["import React, {useRef, useState} from 'react';\nimport './App.css'\n\nconst App =() =>{\n\n  const[data,setData]=useState('')\n  const [down,setDown]=useState('')\n \n  const video=useRef('')\nconst arr=[]\n\n\nlet media;\n\nconst start=()=>{\n  navigator.mediaDevices.getDisplayMedia({video:true,audio:true}).then((stream)=>{\nmedia=new  MediaRecorder(stream)\n\n\n\nmedia.start(1000)\n\nmedia.ondataavailable=(e)=>{\n  arr.push(e.data)\n}\n\n    video.current.srcObject=stream\n    video.current.play()\n    \n      }).catch((err)=>{\n    alert(err)\n\n      })\n}\n\n\nconst stop=()=>{\nmedia.stop()\nconst blob=new Blob(arr,{\ntype:'video/webm'\n})\n\nconst url=window.webkitURL.createObjectURL(blob)\nsetDown(url)\n\n}\n\n\n\n\n    return (\n      <div>\n        <br/><br/><br/>\n<center><h1>Claps stream studio</h1>\n<br/><br/><br/>\n<p>**Only for claps store tutorial video**</p>\n</center>\n   \n      <center><br/><br/>\n      <input id='in' type='text' onChange={(e)=>setData(e.target.value)} placeholder='file name'/><br/><br/><br/><br/>\n  \n        <video ref={video} id='video'></video>&nbsp;<iframe id='video' src={down}/>\n<br/><br/><br/><br/><br/>\n       <button id='btn' onClick={()=>{start()}}>start recording</button>&nbsp;&nbsp;\n        <button id='btn' onClick={()=>{stop()}}>stop recording</button><br/><br/>\n        <a id='btn' href={down} download={`${data}.webm`}>download</a>\n</center>\n\n<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n      </div>\n    );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}